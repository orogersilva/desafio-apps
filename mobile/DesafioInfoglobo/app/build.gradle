rootProject.appPlugins.each {
    apply plugin: it
}

apply from: "${rootProject.getRootDir()}/tools/git/script-git-version.gradle"

android {

    defaultConfig {

        applicationId "com.orogersilva.desafioinfoglobo"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        debug {

            storeFile rootProject.file('keystore/debug.jks')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {

            storeFile rootProject.file('keystore/release.jks')
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    play {

        serviceAccountEmail = System.getenv("SERVICE_ACCOUNT_EMAIL")
        jsonFile = rootProject.file('play.json')
        track = 'alpha'
    }

    productFlavors {

        dev {

            versionCode gitVersionCodeTime
            versionName gitVersionName

            applicationIdSuffix ".dev"
        }

        prod {

            versionCode gitVersionCode
            versionName gitVersionName
        }
    }

    buildTypes {

        debug {

            buildConfigField "String", "INFOGLOBO_API_URL",
                    "\"https://raw.githubusercontent.com/\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard-debug.pro')

            signingConfig signingConfigs.debug
        }

        release {

            buildConfigField "String", "INFOGLOBO_API_URL",
                    "\"https://raw.githubusercontent.com/\""

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard.pro')

            signingConfig signingConfigs.release
        }
    }

    lintOptions {

        checkReleaseBuilds false
    }
}

// Show test status in console.
tasks.withType(Test) {

    testLogging {
        events "passed", "failed"
    }
}

def obtainTestBuildType() {

    def result = "debug"

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    return result
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    rootProject.appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
}

apply from: "${rootProject.getRootDir()}/android.gradle"